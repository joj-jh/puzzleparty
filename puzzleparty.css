.bi {
    width:1em;
    height:1em;
}

#results {
    text-align: center;
}

#resultsHead :first-child {
    width: 4rem;
}

#ao12 > * {
    border-bottom: 5px var(--bs-table-border-color) solid;
}

#results thead th, #results thead{
    position: sticky;
    top: 0;
}

#results thead th:not(:last-child):not(:first-child) {
    background-color: var(--bs-secondary-bg);
    width: 8rem;
    min-width: 5rem;
}

.resultsTableContainer {
    overflow-y: auto;
}

#inspectionOverlay {
    --bs-bg-opacity: 50%;
    position: absolute;
    font-size: 20em;
    z-index: 1000;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
    display: flex;
    justify-content: center;
    align-items: center;
}

#pageContainer .roomTimer {
    visibility: collapse;
    order: 3;
}

#pageContainer[data-connected] .roomTimer {
    visibility: visible;
}

#pageContainer[data-connected]:not([data-has-scramble]) .roomTimer {
    opacity: 50%;
    pointer-events: none;
}

#pageContainer[data-has-scramble] .roomTimer {
    opacity: 100%;
    pointer-events: all;
}

#pageContainer:not([data-connected])::after {
    content: "Connect to a room to get started.";
    font-style: italic;
    padding: 1rem;
    order: 2;
    text-align: center;
}

#pageContainer[data-connected]:not([data-has-scramble])::after {
    content: "Generating scramble...";
    font-style: italic;
    padding: 1rem;
    order: 2;
    text-align: center;
}

#pageContainer .navbar {
    order: 1;
}

#room, #username {
    min-width: 10rem;
    max-width: 15rem;
}

#pageContainer[data-connected] #connect::after {
    content: "Exit";
}

#pageContainer #connect::after {
    content: "Join";
}

#resultsBody td[data-solve-index].mySolve:hover, #resultsBody th:hover {
    cursor: pointer;
}

#resultsHead .myName::after {
    content: 'ðŸ«µ';
    padding-left: 5px;
}

.scrambleArea {
    min-height: 10rem;
    max-height: 10rem;
    overflow-y: auto;
}

#viewScrambleImage {
    width: 20rem;
    height: 20rem;
}

#drawScramble {
    max-height: 20rem;
}

#mainTimerContainer {
    height: 6rem;
}

/*Timer component stuff:*/

.timeEntryContainer {
    position: relative;
}

/*Hide these by default*/
.timeEntryContainer .manualEntry,
.timeEntryContainer .inspectionOverlay,
.timeEntryContainer .timerEntry {
    display: none;
}

.timeEntryContainer .inspectionOverlay {
    opacity: 0;
    transition: opacity .1s ease;
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    z-index: 1000;
}
.timeEntryContainer[data-state="inspecting"] .inspectionOverlay,
.timeEntryContainer[data-state="handsDown"] .inspectionOverlay,
.timeEntryContainer[data-state="readyToStart"] .inspectionOverlay,
.timeEntryContainer[data-state="timing"] .inspectionOverlay {
    opacity: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: var(--bs-body-bg);
}

.timeEntryContainer[data-state="handsDown"] .inspectionOverlay {
    color: var(--bs-warning);
}

.timeEntryContainer[data-state="readyToStart"] .inspectionOverlay {
    color: var(--bs-success);
}

.inspectionOverlay::after {
    content: attr(data-seconds);
}

[data-inspection-enabled="false"] .inspectionOverlay::after {
    content: "0.00";
}

.timeEntryContainer[data-state="timing"] .inspectionOverlay::after {
    content: "Timing...";
}

.timeEntryContainer[data-state="initialised"] .timerEntry::after {
    content: "(Press space to start)";
    font-size: small;
    font-weight: lighter;
}

.timeEntryContainer[data-manual-entry="true"] .manualEntry {
    display: block;
}

.timeEntryContainer[data-manual-entry="false"] .timerEntry {
    display: flex;
    align-items: center;
    justify-content: center;
}
